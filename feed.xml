<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>addamhardy.com</title>
    <description></description>
    <link>http:/addamhardy.com/</link>
    <atom:link href="http:/addamhardy.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 26 Sep 2015 01:02:54 -0500</pubDate>
    <lastBuildDate>Sat, 26 Sep 2015 01:02:54 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>The Ten Commandments of Egoless Programming</title>
        <description>&lt;p&gt;Yesterday I found this &lt;a href=&quot;http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/&quot;&gt;great post&lt;/a&gt; on being a Senior Engineer and one of the best portions, of what was an outstanding albeit very long post that you should also read, was this list of Ten Commandments of Egoless Programming. The writer was making the case that there’s a lot more to being a Senior Engineer than just knowing all of the APIs by memory. He introduces the term “Mature Engineer” rather than Senior Engineer; meaning there are a lot of interpersonal, communication, and intangible skills that you gather only through a long stream of real world experience managing projects and people rather than expertise on a language or codebase.&lt;/p&gt;

&lt;p&gt;This list is so spot-on that it should be required reading for all developing engineers and should probably even be posted on the wall in the office. They are great milestones to follow on the road to mastery as an engineer.&lt;/p&gt;

&lt;h2 id=&quot;the-ten-commandments-of-egoless-programming&quot;&gt;The Ten Commandments of Egoless Programming&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Understand and accept that you will make mistakes.
  &amp;gt; The point is to find them early, before they make it into production. Fortunately, except for the few of us developing rocket guidance software at JPL, mistakes are rarely fatal in our industry. We can, and should, learn, laugh, and move on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are not your code.
  &amp;gt; Remember that the entire point of a review is to find problems, and problems will be found. Don’t take it personally when one is uncovered.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No matter how much “karate” you know, someone else will always know more.
  &amp;gt; Such an individual can teach you some new moves if you ask. Seek and accept input from others, especially when you think it’s not needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t rewrite code without consultation.
  &amp;gt; There’s a fine line between “fixing code” and “rewriting code.” Know the difference, and pursue stylistic changes within the framework of a code review, not as a lone enforcer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Treat people who know less than you with respect, deference, and patience.
  &amp;gt; Non-technical people who deal with developers on a regular basis almost universally hold the opinion that we are prima donnas at best and crybabies at worst. Don’t reinforce this stereotype with anger and impatience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The only constant in the world is change.
  &amp;gt; Be open to it and accept it with a smile. Look at each change to your requirements, platform, or tool as a new challenge, rather than some serious inconvenience to be fought.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The only true authority stems from knowledge, not from position.
  &amp;gt; Knowledge engenders authority, and authority engenders respect so if you want respect in an egoless environment, cultivate knowledge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fight for what you believe, but gracefully accept defeat.
  &amp;gt; Understand that sometimes your ideas will be overruled. Even if you are right, don’t take revenge or say “I told you so.” Never make your dearly departed idea a martyr or rallying cry.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t be “the coder in the corner.”
  &amp;gt; Don’t be the person in the dark office emerging only for soda. The coder in the corner is out of sight, out of touch, and out of control. This person has no voice in an open, collaborative environment. Get involved in conversations, and be a participant in your office community.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Critique code instead of people – be kind to the coder, not to the code.
  &amp;gt; As much as possible, make all of your comments positive and oriented to improving the code. Relate comments to local standards, program specs, increased performance, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What is your experience with these ideals? Do you live and die by any specific one? Are any specific ones challenging for you? Let’s discuss in the comments!&lt;/p&gt;

&lt;p&gt;[source: &lt;a href=&quot;http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/&quot;&gt;Kitchen Soap: On Being A Senior Engineer&lt;/a&gt;]&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Sep 2013 16:24:00 -0500</pubDate>
        <link>http:/addamhardy.com/2013/09/28/the-ten-commandments-of-egoless-programming.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2013/09/28/the-ten-commandments-of-egoless-programming.html</guid>
        
        
      </item>
    
      <item>
        <title>Automate All The Things: Continuous Integration and Deployment at RevUnit</title>
        <description>&lt;p&gt;[cross post from my company blog]&lt;/p&gt;

&lt;p&gt;We are strong believers in the agile method of software development. We break down key features into user stories, do sprint planning, track velocity, unit and integration testing; all that good stuff. But we’ve had a few key pillars of agile development missing for a while and we recently rectified that. RevUnit’s process now fully incorporates continuous integration and continuous deployment. This enables us to automate more of our process which frees us up to focus on the important things — like implementing and shipping features!&lt;/p&gt;

&lt;h2 id=&quot;automate-all-the-things&quot;&gt;Automate all the things!&lt;/h2&gt;

&lt;p&gt;Automating your workflow is vital for a streamlined development process. There are so many small tasks that a developer has to do in addition to their core duties that it can really drain not only the time the developer has but also their focus on the more important tasks at hand. With so much to do just to enable the ability to do the things we have to do, how do we get anything done at all?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Progress isn’t made by early risers. It’s made by lazy men trying to find easier ways to do something.” - Robert A. Heinlein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All development organizations should have the mindset of automating their workflow but it is especially important for smaller start ups. You’re not going to have a QA team or a deployment team. You have one team to do all the things. There are many ways to automate your workflow. We even have a chat bot in our company chatroom that can interface with our GitHub repositories, our project planning system, our production error reporting system, as well as many other integrated systems we use for our planning and development workflow end to end. It even has automated photos of kitties or animated gifs for when we are feeling down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media.tumblr.com/8d186ad810c901ac2f826780a395a4a1/tumblr_inline_mtp64v3iQP1qze6ud.jpg&quot; alt=&quot;Kitty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Specifically for this post, I’ll talk about how we automated our integration testing and deployment using Continuous Integration and Continuous Deployment.&lt;/p&gt;

&lt;h2 id=&quot;what-is-continuous-integration&quot;&gt;What Is Continuous Integration?&lt;/h2&gt;

&lt;p&gt;Continuous Integration is a software development practice where members of a team integrate their work frequently. This integration is trigged by every push of new commits to GitHub. Each time a developer pushes new code to GitHub our CI system clone’s that branch and runs all of the entire unit and integration test suite.&lt;/p&gt;

&lt;p&gt;This is all done automatically on a post-receive hook on GitHub without any manual intervention from a developer. This enables the team to rapidly find integration errors or regression failures in the test suite. This tightens the feedback loop and not only enables more defect free code, but greatly speeds up our process.&lt;/p&gt;

&lt;p&gt;Developer A may have a completely green (passing) test suite on their local machine at the same time that Developer B also has a completely green test suite on their machine. Without this continuous integration process, the tests from those separate developers would not be run together (integration testing) until further down the line; and even then by some manual intervention by a developer.&lt;/p&gt;

&lt;p&gt;The instance where CI really shines is in rapidly exposing regression failures. Without a thorough test suite and CI, a feature that was complete in week 2 of development and was destroyed by a feature that was completed in week 12 of development will never be exposed until the very end in a formal QA process. Obviously that is less than ideal. We need to know about defects immediately or it could really derail the speed and fluidity of our process and our ability to quickly deliver results to a client. This is especially important for defects in features that we already completed and tested thoroughly.&lt;/p&gt;

&lt;h2 id=&quot;what-is-continuous-deployment&quot;&gt;What Is Continuous Deployment?&lt;/h2&gt;

&lt;p&gt;So we’ve automated our integration testing and building, what’s the final step? Deployment. This step of the process can take the longest time depending on the complexity of your application. I’ve even worked in a large corporate environment wherein if you wanted a deployment to the staging servers you had to contact a deployment team which could take up to a week to finally get deployed. That’s crazy!&lt;/p&gt;

&lt;p&gt;Traditionally you plan development which leads into testing and QA which ultimately leads into a planned deployment. You need this planned/tiered (WATERFALL!) approach to development and release when you don’t have CI or even further don’t have any unit or integration tests. You don’t want to deploy an app that you’re not positive is working 100% as it should. Someone call the QA team and tell them we’re ready! Ain’t nobody got time for that.&lt;/p&gt;

&lt;p&gt;At this point we’ve ensured the integrity of our application through ongoing continuous integration. So what is stopping us from automating the final step? Continuous Deployment (sometimes referred to as Continuous Delivery) fills in this gap.&lt;/p&gt;

&lt;p&gt;Continuous Deployment (CD) is a software development practice that triggers an automated deployment of the application after passing all tests and builds in the continuous integration process. This means that as soon as a build is successful on the staging branch, it is automatically deployed to the staging application. Enabling the client to see the most up-to-date feature complete code at any given time. This should happen several times a day. You can take it even further to automate your deployments to production! Once a feature has gone through local unit testing, code review in a pull request, and multiple integration builds through CI, you can push it directly to your production servers giving your users immediate benefit rather than waiting for weekly or biweekly planned and scheduled deployments. Your calendar shouldn’t have anything to do with shipping features to your users. Ship it early and ship it often.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your calendar shouldn’t have anything to do with shipping features to your users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GitHub is fantastic at this and reported that their busiest day yet (as of a blog post in 2012 so I bet they’ve blown past this by now) was on 23 August 2012 with 563 builds and 175 deploys. [blog post by GitHub] That’s 175 deployments to production in a single day on an extremely active application with millions of concurrent users worldwide! No “Under Maintenance” pages. No scheduled outages or deployments. Just ship, ship, ship.&lt;/p&gt;

&lt;h2 id=&quot;why-is-all-of-this-important&quot;&gt;Why Is All Of This Important?&lt;/h2&gt;

&lt;p&gt;As small teams that seem to always be increasing the requirements and expectations, we have to find ways to increase our speed while not decreasing our quality. A tough task. Just not decreasing the quality and maintaining the status quo almost isn’t even an option either. We need to be increasing speed and increasing quality.&lt;/p&gt;

&lt;p&gt;How is that even possible? Delegate work to the machines.&lt;/p&gt;

&lt;p&gt;Using a rigid and well thought out process for your development can help reduce unknowns which will decrease defects, improve overall quality of your codebase, and enable you to rapidly iterate and deliver to your users. Automating that workflow will speed it up even further. It will also turn your development process from a passive process to an active process. Let the process tell you if things are working or breaking. This allows issues or roadblocks to bubble up to the top sooner and takes the responsibility off a single person to remember to accomplish many separate small tasks.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have the technology.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://media.tumblr.com/f5a498a1efcb2d367f23932456b5b1e0/tumblr_inline_mtp63c5ua31qze6ud.jpg&quot; alt=&quot;6 million dollar man&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make life easier for yourself and your team at the same time as delivering better products to your users! It is possible.&lt;/p&gt;

&lt;h2 id=&quot;our-workflow&quot;&gt;Our Workflow&lt;/h2&gt;

&lt;p&gt;We use GitHub for our source control and Travis CI as our hosted continuous integration system. HipChat keeps us connected and aware of action happening within our system and workflow. We also use a modified form of git flow for our branching strategy.&lt;/p&gt;

&lt;p&gt;Here is a quick and dirty overview:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Master branch is the latest production release.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Staging branch is the latest feature complete code that has been deployed to the staging application servers and not deployed to production yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A feature branch is branched off of the staging branch and worked on until it is feature complete with accompanying unit and integration tests that verify functionality.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a developer has finished the feature in their private feature branch, they initiate a Pull Request on GitHub to merge their feature branch back into the staging branch.&lt;/p&gt;

&lt;p&gt;Travis CI captures the pushes to GitHub and the initiation of a Pull Request and runs the tests on the branch. With Travis CI’s great GitHub integration, we can see right there on the Pull Request view whether or not the tests are passing or failing.&lt;/p&gt;

&lt;p&gt;If tests are passing, we do a team wide code review on GitHub by commenting inline on all of the code that will be committed to the staging branch. We cycle through these comments and revisions until everything is good to go and we’re ready to merge into the staging branch.&lt;/p&gt;

&lt;p&gt;Throughout this entire process, pushes to GitHub, comments on code for the code review, passing or failing builds on Travis CI, and every other action related to our code/application/process is pushed to the chatroom in HipChat related to that specific project. Everyone is always up-to-date on what is happening with the project and there are no surprises.&lt;/p&gt;

&lt;p&gt;Once the feature branch has passed a code review, has passing tests in CI and has been acceptance tested and accepted by the product owner, we merge it back into staging which then fires off another cycle of integration testing with our CI system.&lt;/p&gt;

&lt;p&gt;Once this final build and test cycle completes with a passing status, Travis CI initiates and automatic deploy of the application to our staging environments.&lt;/p&gt;

&lt;p&gt;If it is a Rails application, it kicks it off to our staging servers hosted on Heroku and notifies the applicable project room in HipChat of a successful build and Heroku deploy. Enabling the clients to see the latest feature complete build of their application on the web immediately after the feature has been completed.&lt;/p&gt;

&lt;p&gt;If it is an iOS or Android application, it will build a binary and automatically deploy to TestFlight and send emails to all of the users on the beta-testing distribution list for that application. Enabling them to download the latest successful build immediately.&lt;/p&gt;

&lt;p&gt;It’s really a fantastic process!&lt;/p&gt;

&lt;p&gt;As you can see, there are many checks for quality and functionality from the very beginning of the process all the way to the end. As well as backward/redundant checks to be sure everything that once was still is. And while it seems like a lot of steps, it is all automated! A great process should get out of your way and let you do your work.&lt;/p&gt;

&lt;h2 id=&quot;its-been-a-long-journey&quot;&gt;It’s Been A Long Journey&lt;/h2&gt;

&lt;p&gt;We are really excited about this process and it really enables us to stand by our commitment to delivering quality code to our clients and their users. This process executed well almost completely removes the need for a QA period prior to production release which cuts time and cost for our clients.&lt;/p&gt;

&lt;p&gt;Our development process is really what sets us apart from our competitors in the region and we’re always trying to improve it. If you have a similar process or have any questions or comments, leave us some comments below and we’d love to talk to you about it.&lt;/p&gt;

&lt;p&gt;Ways I see to improve it in the future:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I am going to develop some dashboards that will always be displayed on a large tv in the office. So we can always see at a glance if a project’s builds are failing. Or alternately, look up and see green across the board and know we are kicking ass at our job. :)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We use Hubot by GitHub as our chat bot and we’ll be building more Hubot scripts to further automate our workflow.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Of course I didn’t invent the term “Automate all the things!” so credit to whoever that person is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Martin Fowler’s original essay on Continuous Integration: http://www.martinfowler.com/articles/continuousIntegration.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘Automate All The Things’ may become a running column on our blog about various ways to speed up and improve your workflow.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 28 Sep 2013 16:17:00 -0500</pubDate>
        <link>http:/addamhardy.com/2013/09/28/automate-all-the-things-continuous-integration-and-continuous-deployment-at-revunit.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2013/09/28/automate-all-the-things-continuous-integration-and-continuous-deployment-at-revunit.html</guid>
        
        <category>ci</category>
        
        <category>continuous integration</category>
        
        <category>process</category>
        
        <category>travis ci</category>
        
        
      </item>
    
      <item>
        <title>Good Commit Messages And Enforcing Them With Git Hooks</title>
        <description>&lt;p&gt;Git provides a very valuable feature that many developers seem to either overlook or blatantly not care about; it enables you to add distinct sections to a commit message. Specifically, it allows you to add a short summary for the commit and a long and detailed body.&lt;/p&gt;

&lt;p&gt;A great commit message:&lt;/p&gt;

&lt;p&gt;```
Capitalized, short (50 chars or less) summary&lt;/p&gt;

&lt;p&gt;More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.&lt;/p&gt;

&lt;p&gt;Write your commit message in the imperative: “Fix bug” and not “Fixed bug”
or “Fixes bug.”  This convention matches up with commit messages generated
by commands like git merge and git revert.&lt;/p&gt;

&lt;p&gt;Further paragraphs come after blank lines.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bullet points are okay, too&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Typically a hyphen or asterisk is used for the bullet, preceded by a
single space, with blank lines in between, but conventions vary here&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a hanging indent
```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Key points of a well formed commit message:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Must have a summary line&lt;/li&gt;
  &lt;li&gt;Summary line must be 50 characters or less&lt;/li&gt;
  &lt;li&gt;Should have a well thought out and meaningful description&lt;/li&gt;
  &lt;li&gt;No line in the description should be over 72 characters long&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Format breakdown:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First line is summary&lt;/li&gt;
  &lt;li&gt;Second line is empty&lt;/li&gt;
  &lt;li&gt;Third line starts the in-depth description&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure to write your summary in the present tense imperative. For example, instead of &lt;code&gt;Adds new copy to homepage&lt;/code&gt; use &lt;code&gt;Add new copy to homepage&lt;/code&gt; or instead of &lt;code&gt;Fixes bug #234234&lt;/code&gt; use &lt;code&gt;Fix bug #234234&lt;/code&gt;. This folows the convention that git itself uses. Have you ever noticed when you merge a branch the commit message is &lt;code&gt;Merge [branch]&lt;/code&gt; and not &lt;code&gt;Merges [branch]&lt;/code&gt; or &lt;code&gt;Merged [branch]&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;A lot of this info comes from a &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;great blog post&lt;/a&gt; by Tim Pope in 2008. I didn’t make the rules I just follow them™. Various git commands pull the summary automatically and will just truncate your commit message if it is too long. This makes scanning the commit history very cumbersome and annoying. Commit summaries allow you to quickly convey the full intent of the commit in a single and succinct line. Think of it like the subject line of an email.&lt;/p&gt;

&lt;p&gt;Yesterday I was needing a break from normal work and decided to work on some git hooks that would make me follow these rules.&lt;/p&gt;

&lt;p&gt;Git provides several hooks into git events for you to do some pre-defined action prior to or immediately after a commit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
[master][~/dev] ls .git/hooks
applypatch-msg.sample     post-update.sample        pre-commit.sample         prepare-commit-msg.sample
commit-msg.sample         pre-applypatch.sample     pre-rebase.sample         update.sample
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I want to validate the commit message after the user creates the message but prior to it being committed to the repository. The specific hook I need for this is the &lt;code&gt;commit-msg&lt;/code&gt; hook. If you remove the &lt;code&gt;.sample&lt;/code&gt; from these files git will run them at their appropriate times. They are shell scripts and I could have written my message checker in a shell script like bash but I’m really not good at awk and sed and all that crazy shell scripting voodoo. So I just use the commit-msg shell script to call my own python script.&lt;/p&gt;

&lt;p&gt;``` bash commit-msg
#!/bin/sh&lt;/p&gt;

&lt;p&gt;exec &amp;lt; /dev/tty
.git/hooks/validate-commit.py $1
```&lt;/p&gt;

&lt;p&gt;What I want this script to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Verify I have a summary line on my commit&lt;/li&gt;
  &lt;li&gt;Verify the summary line is not over 50 characters&lt;/li&gt;
  &lt;li&gt;Verify no line is over 72 characters&lt;/li&gt;
  &lt;li&gt;If there are any errors, reject my commit and ask me to reformat&lt;/li&gt;
  &lt;li&gt;If I choose to reformat my commit, bring me back into the commit editor and show me what exactly was wrong with my commit in comments on the commit message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a few beers and some tinkering I ended up with this messy bit of python code:&lt;/p&gt;

&lt;p&gt;```python validate-commit.py 
#!/usr/bin/python&lt;/p&gt;

&lt;p&gt;import sys, os
from subprocess import call&lt;/p&gt;

&lt;p&gt;print os.environ.get(‘EDITOR’)&lt;/p&gt;

&lt;p&gt;if os.environ.get(‘EDITOR’) != ‘none’:
  editor = os.environ[‘EDITOR’]
else:
  editor = “vim”&lt;/p&gt;

&lt;p&gt;message_file = sys.argv[1]&lt;/p&gt;

&lt;p&gt;def check_format_rules(lineno, line):
    real_lineno = lineno + 1
    if lineno == 0:
        if len(line) &amp;gt; 50:
            return “Error %d: First line should be less than 50 characters “ \
                    “in length.” % (real_lineno,)
    if lineno == 1:
        if line:
            return “Error %d: Second line should be empty.” % (real_lineno,)
    if not line.startswith(‘#’):
        if len(line) &amp;gt; 72:
            return “Error %d: No line should be over 72 characters long.” % (
                    real_lineno,)
    return False&lt;/p&gt;

&lt;p&gt;while True:
    commit_msg = list()
    errors = list()
    with open(message_file) as commit_fd:
        for lineno, line in enumerate(commit_fd):
            stripped_line = line.strip()
            commit_msg.append(line)
            e = check_format_rules(lineno, stripped_line)
            if e:
                errors.append(e)
    if errors:
        with open(message_file, ‘w’) as commit_fd:
            commit_fd.write(‘%s\n’ % ‘# GIT COMMIT MESSAGE FORMAT ERRORS:’)
            for error in errors:
                commit_fd.write(‘#    %s\n’ % (error,))
            for line in commit_msg:
                commit_fd.write(line)
        re_edit = raw_input(‘Invalid git commit message format.  Press y to edit and n to cancel the commit. [y/n]’)
        if re_edit.lower() in (‘n’,’no’):
            sys.exit(1)
        call(‘%s %s’ % (editor, message_file), shell=True)
        continue
    break
```&lt;/p&gt;

&lt;p&gt;Now if I try to commit a badly formed commit message like this:&lt;/p&gt;

&lt;p&gt;```bash COMMIT_EDITMSG
Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis
ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id
elit. Cras mattis consectetur purus sit amet fermentum. Maecenas
faucibus mollis interdum. Etiam porta sem malesuada magna mollis
euismod. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Praesent commodo
cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Maecenas sed diam eget risus varius blandit
sit amet non magna.&lt;/p&gt;

&lt;h1 id=&quot;please-enter-the-commit-message-for-your-changes-lines-starting&quot;&gt;Please enter the commit message for your changes. Lines starting&lt;/h1&gt;
&lt;p&gt;# with ‘#’ will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use “git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#&amp;gt;      new file:   31234
#
diff --git a/31234 b/31234
new file mode 100644
index 0000000..e69de29
```&lt;/file&gt;&lt;/p&gt;

&lt;p&gt;It will kick me back to the shell prompt me with this message: &lt;code&gt;Invalid git commit message format.  Press y to edit and n to cancel the commit. [y/n]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you press &lt;code&gt;y&lt;/code&gt; to edit your commit it will kick you back to your commit and allow you to fix the bad formatting &lt;strong&gt;and&lt;/strong&gt; even tell you which lines were incorrect and why!&lt;/p&gt;

&lt;p&gt;```bash COMMIT_EDITMSG
Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis
ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id
elit. Cras mattis consectetur purus sit amet fermentum. Maecenas
faucibus mollis interdum. Etiam porta sem malesuada magna mollis
euismod. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Praesent commodo
cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Maecenas sed diam eget risus varius blandit
sit amet non magna.&lt;/p&gt;

&lt;h1 id=&quot;git-commit-message-format-errors&quot;&gt;GIT COMMIT MESSAGE FORMAT ERRORS:&lt;/h1&gt;
&lt;p&gt;#    Error 1: First line should be less than 50 characters in length.
#    Error 2: Second line should be empty.
#    Error 7: No line should be over 72 characters long.&lt;/p&gt;

&lt;h1 id=&quot;please-enter-the-commit-message-for-your-changes-lines-starting-1&quot;&gt;Please enter the commit message for your changes. Lines starting&lt;/h1&gt;
&lt;p&gt;# with ‘#’ will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use “git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#&amp;gt;      new file:   1234098
#
diff --git a/1234098 b/1234098
new file mode 100644
index 0000000..e69de29
```&lt;/file&gt;&lt;/p&gt;

&lt;p&gt;This tells us that we have errors on line 1, 2 and 7 of our commit. I’ve accomplished everything I set out to and now I’ll be forced to follow good practices on my commit messages.&lt;/p&gt;

&lt;p&gt;I actually wrote this intially in Ruby, if you know me you know I am definitely not a python programmer, but had some problems I couldn’t figure out with forking subprocesses for the editor after a second commit rejection. I needed it to stay in the error loop and check the message again but if you rejected your commit and then tried to use the exact same message with the errors again, it would succeed and commit to the repository. Someday soon I’ll dig into that more but for now this python script will certainly do!&lt;/p&gt;

&lt;p&gt;Do you follow any guidelines on commit message format?&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jun 2013 20:39:00 -0500</pubDate>
        <link>http:/addamhardy.com/2013/06/05/good-commit-messages-and-enforcing-them-with-git-hooks.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2013/06/05/good-commit-messages-and-enforcing-them-with-git-hooks.html</guid>
        
        <category>git</category>
        
        <category>script</category>
        
        
      </item>
    
      <item>
        <title>Hiding Your Desktop Icons For A Presentation On OS X</title>
        <description>&lt;p&gt;You know when your house is really dirty and you avoid having people come over until you get it clean? I often feel the same way when I’m using my machine and I need to show someone something. A lot of the time my desktop is a complete disaster. I go through cycles really. It gets dirtier and dirtier for a few weeks and then once a month or so I do a deep clean and clear it all out. And then restart the process. &lt;!-- more --&gt;(Much like my house unfortunately..) But I have to show people stuff on my machine all the time! Just showing a coworker something in the office is usually passable but this week I had to give a presentation and a live demo on my machine and my desktop was a disaster. I didn’t really feel like going through and deleting everything on my desktop just yet. What else could I do? I knew there had to be a way with AppleScript.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-quickly-get-from-this&quot;&gt;How do I quickly get from this:&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/hidingicons/before.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;to-this&quot;&gt;To this:&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/hidingicons/after.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is help! Instead of deleting all of your files you have on your desktop, you can use an applescript to temporarily hide everything on your desktop.&lt;/p&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open up AppleScript Editor&lt;/li&gt;
  &lt;li&gt;Copy and paste the script below into the editor&lt;/li&gt;
  &lt;li&gt;Hit Run&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-applescript&quot;&gt;The Applescript:&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;applescript hide_desktop.applescripts
display dialog &quot;Desktop icons visible or hidden?&quot; buttons {&quot;Visible&quot;, &quot;Hidden&quot;} with icon 2 with title &quot;Switch to presentation mode&quot; default button 1
set switch to button returned of result
if switch is &quot;Hidden&quot; then
  do shell script &quot;defaults write com.apple.finder CreateDesktop -bool FALSE;killall Finder&quot;
else
  do shell script &quot;defaults delete com.apple.finder CreateDesktop;killall Finder&quot;
end if
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you hit run you’ll be presented with a dialog, hit “Hidden” and it’ll hide everything on your Desktop! Run the script again and hit “Visible” to return everything to normal. It’ll look just like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hidingicons/runninghidescript.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fire this off right before your presentation and you’ll be good to go. Save the script somewhere – maybe not on your desktop ;) – and just double click and run whenever you need it. Hope this helped you out as much as it helped me!&lt;/p&gt;

</description>
        <pubDate>Sat, 25 May 2013 00:51:00 -0500</pubDate>
        <link>http:/addamhardy.com/2013/05/25/hiding-your-desktop-icons-for-a-presentation-on-os-x.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2013/05/25/hiding-your-desktop-icons-for-a-presentation-on-os-x.html</guid>
        
        <category>osx</category>
        
        <category>applescript</category>
        
        <category>protips</category>
        
        
      </item>
    
      <item>
        <title>How In The Hell Do I Test A Facebook App From localhost?</title>
        <description>&lt;p&gt;So no shit, there you are, building a web app that is using the Facebook SDK/API. You’ve followed all the integration tutorials. You’ve got all the code in place. You’re ready to go. You fire up the Sidekiq and your Rails server with Foreman, and you finally click on your pretty little Facebook login button. And then…
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/facebook-localhost/localhost-error-noauth.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;doh-right&quot;&gt;DOH, right?&lt;/h2&gt;

&lt;p&gt;Then you want to punch yourself. Why didn’t I put localhost into the app domains? I better go ahead and do that. You log into Facebook and put localhost in there. And then…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/facebook-localhost/localhost-error.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ok-facebook-so-what-the-hell-do-i-do-then&quot;&gt;Ok Facebook… So WHAT THE HELL DO I DO THEN?&lt;/h2&gt;

&lt;p&gt;Scratched my head for a few minutes. Started thinking about how soon until it was drinking time, and then had a thought. Why not just locally redirect the production URL to my machine? The app will then send requests with a production URL referrer and will be authorized by Facebook’s dumb ass security schemes. (Ok maybe not dumbass but certainly inconvenient. I’m trying to work here!)&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add the production URL to your /etc/hosts file and redirect back to localhost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;bash /etc/hosts
##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1         localhost
255.255.255.255   broadcasthost
::1               localhost 
fe80::1%lo0       localhost
127.0.0.1 app.btiques.com
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you change your hosts file on a Mac you always have to flush the cache and force OSX to re-query the DNS servers. Run this command and you should be good to go.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash Run this to clear your cache
dscacheutil -flushcache 
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, have a beer and relax before you kill somebody. This shit can get stressful.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 May 2013 19:57:00 -0500</pubDate>
        <link>http:/addamhardy.com/2013/05/15/how-in-the-hell-do-i-test-a-facebook-app-from-localhost.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2013/05/15/how-in-the-hell-do-i-test-a-facebook-app-from-localhost.html</guid>
        
        <category>facebook</category>
        
        <category>api</category>
        
        <category>networking</category>
        
        <category>security</category>
        
        <category>opengraph</category>
        
        
      </item>
    
      <item>
        <title>Redirecting to your app from Mobile Safari. And failing gracefully.</title>
        <description>&lt;p&gt;It’s been too many months since the last blog. And I really mean to start it up regularly again. Today I finally had a topic that popped up that I could easily write a quick post about and I’m hoping that getting a post out will get the ball rolling and I can get back into the groove of blogging again. Today I needed to have a mobile website have a link to the native app on the iPhone. IF they have it installed. This proved to be a bigger pain in the ass than you’d think. 
&lt;!-- more --&gt;
For those who haven’t used custom URL schemas with iOS projects, you are able to register a custom URL with the operating system on iOS and have that URL, wherever it is called, open your app. I am currently finishing up development on a client project, http://btiques.com, and I need this functionality. But they don’t make it easy on you.&lt;/p&gt;

&lt;h2 id=&quot;my-desired-result&quot;&gt;My desired result:&lt;/h2&gt;

&lt;p&gt;A user Facebook sees a shared product from the btiques iPhone application. This could have been shared by a friend who has the app and really liked some shirt they found or it could have been shared by the boutique when they put the product on sale. When they click on that link in Facebook or Twitter or even an email, it takes them to a mobile web site that shows a preview of the product. Up to to this point everything has been easy. Just links to mobile websites. We’re good. The problem then arises: currently they’re not able to buy the products from the website. They need to have the app. So using the iOS custom URL schemes, I can call something to the effect of btiques://product/{product_id} and it would open the app and bring them right to that product in the app. But what about people who don’t have the app you say? There is the issue.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem:&lt;/h2&gt;

&lt;p&gt;&amp;lt;img src=”/assets/images/detect_app/unknownurl.png”/ style=”width:200px; float: right; margin-left: 15px;”&amp;gt;&lt;/p&gt;

&lt;p&gt;When a user without the app clicks a link with this custom URL scheme and they don’t have the app installed, and therefore don’t have the custom URL scheme registered with the operating system on the device, they get this really ugly alert message. Ideally we’d say something like “Oops looks like you don’t have the app installed” or something, but since iOS has no idea what that URL even is until you tell it what it is, it just says this: “Safari cannot open the page because the address is invalid.”&lt;/p&gt;

&lt;p&gt;Now that’s really informative! The user now has no idea what is really happening. We want them to think, “Doh, I don’t have the app. I should go download it,” but they really have no idea what is going on. This is a fault with the website for all they know. A bug. So how do we gracefully deal with this? It’s a little dumb, but there is a way. Sometimes, most of the time really, when approached with stupid OS/memory/processing power/language capability/anything you can imagine constraints, we have to get creative with our solutions. And this situation definitely required a creative solution.&lt;/p&gt;

&lt;h2 style=&quot;clear: both&quot;&gt;The Solution:&lt;/h2&gt;

&lt;p&gt;First off, here is the code:&lt;/p&gt;

&lt;p&gt;```javascript (app.exist?) ? open_app() : open_appStore()
    $(“.open_app”).click(function(e){
        var id = $(e.target).data(“product-id”);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var n = [],
    i = !1;
    
    $(window).on(&quot;pagehide&quot;, function () {
        n.map(window.clearTimeout)
    });

    window.location = &quot;btiques://?salesid=&quot; + id;

    n.push(window.setTimeout(function () {
        n.splice(0), i = !1, window.location = &quot;http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=641292705&amp;amp;mt=8&quot;
    }, 250));

    n.push(window.setTimeout(function () {
        i &amp;amp;&amp;amp; window.location.reload()
    }, 500))
}); ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you don’t have to do it exactly how I did it, but the key factors of the script are changing the window location to the desired custom URL scheme for your app, and then setting a function to fire off on a timeout in 100-300ms that will redirect them to the iTunes page for your app. If you send them to the itunes page for your app while on the phone, it will send them to your app in the AppStore app.&lt;/p&gt;

&lt;p&gt;What is happening: You fire off a command to go to your app and a command to go to your itunes page in 200ms. If it successfully goes to your app, it cancels that delayed function and just goes to your app and all is right in the world. If in 200ms you still haven’t successfully gone to your app, the delayed function fires and sends you to the AppStore. And dealing in milliseconds this all happens very quickly and the user hardly notices all these hoops you’re having to jump through. Get it?&lt;/p&gt;

&lt;p&gt;Here I push functions onto an array on timeout delays. If the safari switches views, firing a pagehide event, I go through the array and cancel out the timeouts. This would happen if the window.location redirect to btiques:// worked. If it did not work, the corresponding functions set on delays would fire.&lt;/p&gt;

&lt;p&gt;This results in the following flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User presses ‘OPEN IN APP’:
    &lt;ul&gt;
      &lt;li&gt;User has app:
        &lt;ul&gt;
          &lt;li&gt;Opens app&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;User does not have app:
        &lt;ul&gt;
          &lt;li&gt;Tries to open app and fails. Immediately sends the user to the AppStore page for your app&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It shows that ugly alert screen for a few milliseconds and then, virtually immediatly, redirects the user to the AppStore. While this isn’t perfect-world-ideal, it is very smooth given our constraints with the OS.&lt;/p&gt;

&lt;p&gt;Have you had to solve this problem before? It was pretty aggravating in the beginning while realizing this was “impossible” to do, but pretty rewarding to find that loop hole solution to circumvent the “impossible.” :)&lt;/p&gt;

</description>
        <pubDate>Tue, 14 May 2013 19:39:00 -0500</pubDate>
        <link>http:/addamhardy.com/2013/05/14/redirecting-to-your-app-from-mobile-safari-and-failing-gracefully.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2013/05/14/redirecting-to-your-app-from-mobile-safari-and-failing-gracefully.html</guid>
        
        
      </item>
    
      <item>
        <title>Mediocrity. Hell.</title>
        <description>&lt;p&gt;Warning: This is a pretty personal post. Staying up too late with too much wine
and too much self doubt led to this existential crisis. Writing blog posts when
you’re alone at 3am after nearly 2 bottles of wine can make you question your life.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;I’m in a never ending battle with the demons of mediocrity. I can’t think of another thing more depressing than knowing that I have one life, one very short life, and that my life will probably be meaningless. Not a horrible life as if I didn’t try. Not a life where I truly made a difference and reached my peak. Just a life of mediocrity. A life firmly in the middle. An invisible life. Why even live this life if you’ll end it with no greater impact than before it existed?&lt;/p&gt;

&lt;p&gt;So I’m constantly fighting to be better. I know I’m better than shit – even better than normal, but there I am; firmly in the middle. I’d rather be in the realm of those who do not care than be where I feel that I am. In the truly invisible and meaningless class of mediocrity. Its hard to look at your colleagues constantly in an upward gaze. I don’t necessarily want to look down on them. I don’t need to be remembered. I just want to be level with the. I want to look at colleagues in my industry and think to myself, “there is nothing that that person can do, that I cannot do.” I’m in a perpetual state of deprecation. I feel as if I’ve done enough to make it. To coast by. I can successfully work with the knowledgable and be seen as knowledgable myself; yet it’s not enough. No one will know my work. No one will know my name. I am invisible. Meaningless. A drone. Just another cog in the machine. I will admit I am slightly higher than some. Some being those with no desire to ever more than they are, yet I am still lower than where I should be – where I want to be. I will forever be in the position of looking up to where I want to be and never satisfied with where I am. I am lost.&lt;/p&gt;

&lt;p&gt;We get in these positions where we feel like we are successful. We feel like we have lots of experience. But you should ask yourself, what have you done? What have you changed? The answer is probably nothing. It’s all bullshit. Because we get comfortable. We get complacent. And complacency is the mortal enemy of success. But then again is success even enough? Technically I am successful. I have the experience. I have the value. But I still feel like I am nothing. “Success,” whatever that means, is nothing unless it is success for you. You can save as many corporate dollars as you can and be respected by as many small teams of other mediocre people as you can but in the end you still disappear. You still meant nothing.&lt;/p&gt;

&lt;p&gt;How can we be worth something? How can we make our lives not a meaningless brief gasp for Oxygen in a generally meaningless existence surrounded by a probably even more meaningless world? Who knows. I just know I don’t need to be remembered. I just want to know for myself that I broke the middle. That I did not accept that I am mediocre. And I don’t accept that I’m mediocre, but I really question if I can overcome it. People who love me will tell me differently, but I feel like I know my capabilities and my limits. And I really don’t know If I can ever be like or as good as one of the people I look up to. And it kills me. It negates my life. Being good enough to do what I do yet only good enough to be completely invisible. We have such an absurdly short life. How can you settle for what you’ve done?&lt;/p&gt;

&lt;p&gt;I try to learn as much as I can. I try to do more than I’ve done before. I still doubt it’ll ever be enough. How do you come to terms with the fact that you are mediocre? How do you come to terms with the fact no one will ever know your work? How do you come to terms with the fact that you will never contribute to society? Never contribute anything worth while. That you will forever be a user and not a producer. Most of us live and die and disappear. Will you just fade away? Or will you be more? Not everyone can be Oscar Wilde or Steve Jobs. The vast majority of us are predetermined to be nothing. So will you at least burn out trying to be more? Burn out trying everything you could? As immortalized by Kurt Cobain’s suicide note, it’s better to burn out than to fade away.&lt;/p&gt;

&lt;p&gt;I’ll keep trying. That is who I am. But the more I try the thinner I’m spread, and I fear mediocrity will win. And as hard as I try to burn out, I will just fade away. The goddamned devil of mediocrity will win. I’ll die in the middle. I’ll die a nobody.&lt;/p&gt;

&lt;p&gt;I guess wanting to be more is better than never caring, but at least they never know what they could have been. While we unfortunate damned in the middle never became great, but knew, with absolute clarity, that we could have been great and never were. We never were.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Dec 2012 02:55:00 -0600</pubDate>
        <link>http:/addamhardy.com/2012/12/24/mediocrity-hell.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2012/12/24/mediocrity-hell.html</guid>
        
        <category>personal</category>
        
        <category>introspective</category>
        
        <category>depression</category>
        
        <category>learning</category>
        
        <category>blog</category>
        
        
        <category></category>
        
      </item>
    
      <item>
        <title>[Talk] Objective-C For Web Developers</title>
        <description>Last week I was able to be a speaker at a local tech conference in Fayetteville, AR, called &lt;a href=&quot;http://techfests.com/NWA/2012/default.aspx&quot;&gt;TechFest NWA&lt;/a&gt;. For the past few years I&#39;ve had a goal I really wanted to accomplish of being a speaker at a conference and I was finally able to realize that goal. And on iOS to boot! Overall, it was pretty awesome!
&lt;!-- more --&gt;
&lt;br /&gt;&lt;br /&gt;
I&#39;ve given tons of &quot;talks&quot; and classroom type trainings for large groups but this was my first conference and it felt somehow different. I was pretty nervous for some reason. I guess maybe because I was speaking to professional peers? With teaching students you know they don&#39;t have any idea what you&#39;re talking about but at a tech conference I felt like I might be more harshly judged. But once I started talking it all went smoothly and turned out great! I think I could have put some more time into my talk and it could have been better -- of course I am a master procrastinator. :( But it turned out alright. I&#39;m excited for my next opportunity to be a speaker at another conference. Maybe I&#39;ll be less nervous next time. However... probably not!
&lt;br /&gt;&lt;br /&gt;
Here are the slides I made for the session. Hope you enjoy!
&lt;br /&gt;&lt;br /&gt;
&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;50379b821d81480002000884&quot; data-ratio=&quot;1.3333333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
        <pubDate>Tue, 28 Aug 2012 00:00:00 -0500</pubDate>
        <link>http:/addamhardy.com/2012/08/28/talk-objective-c-for-web-developers.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2012/08/28/talk-objective-c-for-web-developers.html</guid>
        
        <category>talk</category>
        
        <category>keynote</category>
        
        <category>ios</category>
        
        <category>webdev</category>
        
        
      </item>
    
      <item>
        <title>I finally rewrote my resume. In LaTeX.</title>
        <description>I had been needing to rewrite my resume for a while. I&#39;ve always had it in a doc file of course but I wanted to be super nerd-o and update it in LaTeX. And here it is! &lt;!-- more --&gt;
&lt;br /&gt;&lt;br /&gt;
It was quite a bitch to work through all this and figure everything out but I found a nice example to work off of and it was fun to finally learn LaTeX. (Which is apparently pronounced /ˈlɑːtɛk/ or if you don&#39;t read dictionary, lay-tek). I&#39;ve published it on Github (&lt;a href=&quot;https://github.com/addamh/resume&quot;&gt;link&lt;/a&gt;) if you&#39;d like to fork it and write your own resume in LaTeX. The code and resulting compiled PDF are below. Let me know what you think!

&lt;br /&gt;&lt;br /&gt;
The code:
&lt;script src=&quot;https://gist.github.com/3505810.js?file=resume.tex&quot;&gt;&lt;/script&gt;
&lt;br /&gt;&lt;br /&gt;
The compiled result:
&lt;div&gt;
	&lt;img src=&quot;/assets/images/resume/resume-1.png&quot;&gt;
	&lt;img src=&quot;/assets/images/resume/resume-2.png&quot;&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 28 Aug 2012 00:00:00 -0500</pubDate>
        <link>http:/addamhardy.com/2012/08/28/i-finally-rewrote-my-resume-in-latex.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2012/08/28/i-finally-rewrote-my-resume-in-latex.html</guid>
        
        <category>latex</category>
        
        <category>resume</category>
        
        
      </item>
    
      <item>
        <title>Well, I Just Submitted My First Abstract To Speak At A Conference</title>
        <description>&lt;p&gt;Putting the game face on. And just doing it.&lt;/p&gt;

&lt;p&gt;I’ve been on the fence for weeks now…. but I quickly filled out the forms to speak at &lt;a href=&quot;http://techfests.com/NWA/2012/&quot;&gt;NWA Techfest&lt;/a&gt; before I could change my mind!&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;I’m a bit nervous. It’ll be my first speaking engagement at a conference, but I’ve been wanting to do this for a while. I’ve given training and talks in front of several large groups of people, probably larger than I’ll have in my session here if I get accepted, but I’ve never actually been a speaker at a conference.&lt;/p&gt;

&lt;p&gt;I originally had the idea to give a talk for Ruby developers to get started with Objective-C (iOS and Mac programming language in case you’re a tourist here). I was going to call it ‘Objective-C For Rubyists’ but last minute I just decided to make it ‘Objective-C For Web Developers.’ I’ll cover Ruby and PHP Developers introducing themselves to Objective-C. I really loathe PHP and never work in it anymore but I wanted to touch more of the web developers in the area and I think there’s more PHP developers than Ruby developers in the area. ( and on top of that, more .Net developers than Ruby and PHP, but who cares about them, right? )&lt;/p&gt;

&lt;p&gt;This is what I submitted for my talk. I’m sure I’ll have confirmation soon if it will be accepted or not. If it is, I will be the only speaker on the Mobile Development track for NWA Techfest 2012.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Title:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Objective-C For Web Developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Are you a Ruby or PHP developer and have been on the fence with jumping into iOS development? You want to join in on the wave but you’re apprehensive about going from building web applications to native apps using Objective-C? It’s really not as daunting as it may seem and you already have the foundation in code to get started. I’ll touch on how developing in Ruby and PHP compare to developing in Objective-C for the iOS platform and how there’s no better time than now to stop thinking about it and just start doing iOS development regardless of your development background.&lt;/p&gt;

&lt;p&gt;If you’ll be in town, come give me a little support and listen to my talk!&lt;/p&gt;

&lt;p&gt;I’ll probably be pretty nervous. And &lt;del&gt;more than likely&lt;/del&gt; possibly intoxicated.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Aug 2012 00:00:00 -0500</pubDate>
        <link>http:/addamhardy.com/2012/08/09/well-i-submitted-my-first-abstract-for-a-conference-talk.html</link>
        <guid isPermaLink="true">http:/addamhardy.com/2012/08/09/well-i-submitted-my-first-abstract-for-a-conference-talk.html</guid>
        
        
      </item>
    
  </channel>
</rss>

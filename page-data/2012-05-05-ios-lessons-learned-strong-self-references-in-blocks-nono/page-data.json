{"componentChunkName":"component---gatsby-theme-code-notes-src-templates-note-js","path":"/2012-05-05-ios-lessons-learned-strong-self-references-in-blocks-nono","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"emoji\": \"‚úèÔ∏è\",\n  \"title\": \"Strong References To Self In Blocks are a No-No\",\n  \"tags\": [\"iOS\", \"objective-c\", \"lessons-learned\"],\n  \"modified\": \"2012-05-05T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I've just started the leg of my professional career involving iOS. I've been a registered iOS developer since the iPhone developer program was created and I've been tinkering with things since then, but now I am employed as an iOS developer. I can officially say that my profession is 'iOS Developer'.\"), mdx(\"p\", null, \"Today I've been diving into the code of my new employer -- \", mdx(\"a\", {\n    href: \"http://mobilefwd.com\"\n  }, \"MobileFWD\"), \" check that shit out! -- and I've hit my first professional iOS developer 'Lesson Learned'.\"), mdx(\"p\", null, \"What is that lesson learned you say?\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Do not use a strong reference to self inside a block.\")), mdx(\"p\", null, \"Doing so will result in a retain-cycle loop. The block is being retained by the object. And the object is retaining the block. Thus both will probably never be released because both have a reference pointing to them.\"), mdx(\"p\", null, \"I first attempted to do this:\"), mdx(Gist, {\n    id: \"2622460\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"That resulted in a warning from Xcode notifying me that 'Capturing self strongly in this block is likely to lead to a retain cycle.' There is a simple work around for strong referencing self inside a block -- create a weak reference to self and use that!\"), mdx(\"p\", null, \"he solution is to access self indirectly from a reference that will definitely not be retained instead of accessing self directly. Using a weak reference to self inside the block will no longer retain the object. The object can then be released later explicitly or through the magic of ARC.\"), mdx(\"p\", null, \"Changing my code to this enabled me to circumvent this retain cycle while still accomplishing what I originally set out to:\"), mdx(Gist, {\n    id: \"2625236\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"This method of creating a weak reference that will not retain the result of the call is not the only way of approaching this. Here are a few more examples:\"), mdx(Gist, {\n    id: \"2625275\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"All three of these will return a reference that will not be retained, but they do behave a little differently. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__weak\"), \" will zero the reference when the object is released. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__unsafe_unretained\"), \" will leave an invalid pointer. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__block\"), \" will allow you to change the value of the reference from within the block.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__block\"), \" should not be used in iOS5. In iOS with ARC, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__block\"), \" still still be retained. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__weak\"), \" is preferred however you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__unsafe_unretained\"), \" for backwards compatibility.\"), mdx(\"p\", null, \"But if you are absolutely positive that the retain cycle will be broken despite using a strong reference to self inside the the block, you can always at a #pragma mark to ignore the warnings. ( \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#pragma clang diagnostic ignored \\\"-Warc-retain-cycles\\\"\"), \" ) \"), mdx(\"p\", null, \"Of course silencing warnings is a bad idea 99% of the time however. :)\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Strong References To Self In Blocks are a No-No","tags":["iOS","objective-c","lessons-learned"],"emoji":"‚úèÔ∏è","modified":"May 5, 2012","modifiedTimestamp":"2012-05-05T00:00:00.000Z"},"references":[],"fields":{"slug":"/2012-05-05-ios-lessons-learned-strong-self-references-in-blocks--nono"},"tableOfContents":{},"parent":{"relativePath":"2012-05-05-ios-lessons-learned-strong-self-references-in-blocks--nono.mdx"}}},"pageContext":{"id":"fa5e9e68-972a-5064-914e-917d504ce464","previous":{"id":"d9b85ed5-c85e-5d33-a744-72a4ca942c46","frontmatter":{"title":"Deploying Jekyll With Git","tags":["jekyll","git"]},"fields":{"slug":"/2012-04-08-deploying-jekyll-with-git"}},"next":null,"hasUntagged":false,"basePath":"/","tags":[{"tag":"CI","totalCount":1,"slug":"/ci","path":"/tag/ci"},{"tag":"LaTeX","totalCount":1,"slug":"/la-te-x","path":"/tag/la-te-x"},{"tag":"applescript","totalCount":2,"slug":"/applescript","path":"/tag/applescript"},{"tag":"dev culture","totalCount":3,"slug":"/dev-culture","path":"/tag/dev-culture"},{"tag":"facebook","totalCount":1,"slug":"/facebook","path":"/tag/facebook"},{"tag":"git","totalCount":2,"slug":"/git","path":"/tag/git"},{"tag":"iOS","totalCount":3,"slug":"/i-os","path":"/tag/i-os"},{"tag":"interview","totalCount":2,"slug":"/interview","path":"/tag/interview"},{"tag":"jekyll","totalCount":1,"slug":"/jekyll","path":"/tag/jekyll"},{"tag":"lessons-learned","totalCount":1,"slug":"/lessons-learned","path":"/tag/lessons-learned"},{"tag":"networking","totalCount":1,"slug":"/networking","path":"/tag/networking"},{"tag":"objective-c","totalCount":1,"slug":"/objective-c","path":"/tag/objective-c"},{"tag":"osx","totalCount":1,"slug":"/osx","path":"/tag/osx"},{"tag":"process","totalCount":1,"slug":"/process","path":"/tag/process"},{"tag":"protips","totalCount":1,"slug":"/protips","path":"/tag/protips"},{"tag":"resume","totalCount":1,"slug":"/resume","path":"/tag/resume"},{"tag":"safari","totalCount":1,"slug":"/safari","path":"/tag/safari"},{"tag":"security","totalCount":1,"slug":"/security","path":"/tag/security"},{"tag":"spotify","totalCount":1,"slug":"/spotify","path":"/tag/spotify"},{"tag":"talks","totalCount":2,"slug":"/talks","path":"/tag/talks"},{"tag":"travis ci","totalCount":1,"slug":"/travis-ci","path":"/tag/travis-ci"},{"tag":"webdev","totalCount":1,"slug":"/webdev","path":"/tag/webdev"}],"pages":[{"id":"0a535571-7f8c-57da-a35f-34174c35d837","frontmatter":{"title":"PGP","tags":null,"emoji":"üîê"},"fields":{"slug":"/pgp"},"slug":"/pgp","path":"/pgp"},{"id":"f714b3b8-9df1-505b-afdd-99672e68133d","frontmatter":{"title":"me","tags":null,"emoji":"üßî‚Äç‚ôÇÔ∏è"},"fields":{"slug":"/me"},"slug":"/me","path":"/me"}]}},"staticQueryHashes":["1308211557","2744905544","467212769"]}